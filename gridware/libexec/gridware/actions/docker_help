#!/bin/bash
#==============================================================================
# Copyright (C) 2017 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
require action

main() {
    action=$1
    shift

    case $action in
        help|build|list|pull|push|run|share|start-registry)
            help_for_${action}
            ;;
        ?*)
            echo "${cw_BINNAME}: no such topic: ${action}"
            echo ""
            general_help
            ;;
        *)
            general_help
            ;;
    esac
}

help_for_help() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker help [<command>]

  DESCRIPTION:

    Get help with Gridware container commands.  If no <command> is
    specified, show some general help.

EOF
}

help_for_list() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker list

  DESCRIPTION:

    List available Gridware container images.

EOF
}

help_for_build() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker build [OPTIONS] <package> [--variant <variant>] [<package> [--variant <variant>] ...]

  DESCRIPTION:

    Build a new Gridware container image for Gridware package <package>,
    supplying an optional <variant>. Multiple packages can be specified.

    The parameters are ignored when building the base container image.

  OPTIONS:

    --base
      Build the Gridware base container image.

    --from <container>
      Specify a different Gridware base container image to use when building
      the container for <package>.

    --name <name>
      Specify a name for the image. If not specified, a name based on the
      selected packages will be generated.

    --script <scriptfile>
      Specify a job script to run by default in the container image.

EOF
}

help_for_push() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker push [OPTIONS] <package>

  DESCRIPTION:

    Push the built Gridware container image for <package> to the configured
    Docker container registry.

  OPTIONS:

    --base
      Push the Gridware base container image.

EOF
}

help_for_pull() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker pull <package>

  DESCRIPTION:

    Pull a prebuilt Gridware container image for <package> from the configured
    Docker container registry.

EOF
}

help_for_run() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker run [OPTIONS] <package> [<runmode>] [PARAMS...]

  DESCRIPTION:

    Execute a Gridware container for <package>.

    Specifying the '--script' <runmode> will copy the specified script
    into the container and pass that (along with any supplied
    parameters) to the standard entrypoint of the image.

    Specifying the '--command' <runmode> will skip usual Gridware
    environment setup and execute the command and parameters provided
    directly.

    Specifying the '--interactive' <runmode> will skip usual Gridware
    environment setup and start an interactive session within the
    container.  If no program is specified as a parameter, the default
    of '/bin/bash' is used.

    Specifying no <runmode> will execute the standard entrypoint of
    the image directly, passing in any supplied parameters.

  OPTIONS:

    --workdir <directory>
      Specify a top-level working <directory> which will be created
      relative to your home directory if it doesn't exist.
      Job-specific directories will be created within the directory
      for working and output directories and mapped into the container
      at '/job/work' and '/job/output'.  The <directory>/input will be
      mapped into the container at '/job/input'.  Defaults to the name
      of the <package>.

    --mount /path/on/host:/path/in/container
      Specify additional volumes to mount in the container. It is not possible
      to override the '/job/input', '/job/output' and '/job/work' directories
      described above.

    --mpi[=N]
      Run the job in an MPI environment, starting N copies of the image in a
      "slave" configuration, before running a container for the MPI "master"
      process. If not specified, N defaults to 2.

      Two files will be made available within the container at '/job/work/':
        - '/job/work/hosts' is a hosts file containing entries for each slave
          container being run as part of the job
        - '/job/work/hostlist' is a file listing the IP addresses of each
          slave container, one per line.
      These files may be used to specify a list of hosts for 'mpirun' or
      similar.

EOF
}


help_for_share() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker share <package>

  DESCRIPTION:

    Share the Gridware container image for <package> with other nodes in the
    cluster.

    The image must already be available on the node from which this command is
    run (e.g. have been used with 'alces gridware docker pull' or 'alces
    gridware docker run'). Other nodes in the cluster will automatically import
    the image, making it available to run on each node.

EOF
}

help_for_start-registry() {
    cat <<EOF
  SYNOPSIS:

    alces gridware docker start-registry

  DESCRIPTION:

    Run a local Docker image repository.

    This command will start a Docker container running a Docker image repository
    configured on port 5000. Images can then be pushed and pulled to the
    repository as per the Docker documentation, from any node in the cluster.

EOF
}

general_help() {
    local binname
    binname="${cw_BINNAME% *}"
    binname="${binname% *}"
    cat <<EOF
  NAME:

    ${binname}

  DESCRIPTION:

    Perform containerized Gridware operations.

  COMMANDS:

EOF
printf "  %-27s  %s\n" "$cw_BINNAME help" "More help about this command."
printf "  %-27s  %s\n" "$cw_BINNAME list" "List available Gridware containers."
printf "  %-27s  %s\n" "$cw_BINNAME run" "Run a containerized Gridware application."
printf "  %-27s  %s\n" "$cw_BINNAME build" "Build a containerized Gridware application."
printf "  %-27s  %s\n" "$cw_BINNAME pull" "Push a container image from a Docker registry."
printf "  %-27s  %s\n" "$cw_BINNAME push" "Push a built container image to the Docker registry."
printf "  %-27s  %s\n" "$cw_BINNAME share" "Share a container image with other nodes in this cluster."
printf "  %-27s  %s\n" "$cw_BINNAME start-registry" "Start a local Docker registry."
cat <<EOF

Please report bugs to support@alces-software.com
Alces Software home page: <http://alces-software.com>
EOF
}

main "$@"
