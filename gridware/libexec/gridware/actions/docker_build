#!/bin/bash
#==============================================================================
# Copyright (C) 2017 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_build_base() {
    local tag
    tag="$_REGISTRY/$_REGISTRY_USER/gridware-base"
    echo "Building Gridware base image: $tag"
    docker build -t "$tag:latest" "${cw_ROOT}"/var/lib/gridware/docker/gridware-base
}

join_by () {
  local IFS="$1"
  shift
  echo "$*"
}

main() {
  local arg base_image default_script display_name name package packages pkg_name provided_name variant
  packages=()

  # default base image and name
  base_image="$_REGISTRY/$_REGISTRY_USER/gridware-base"
  name="gridware"

  while [ "$1" ]; do

    arg="$1"
    shift

    case $arg in
      --base)
        _build_base
        exit 0
      ;;
      --from)
        if [ "$1" ]; then
          base_image="$_REGISTRY/$1"
          shift
        else
          action_die "from parameter requires a value"
        fi
        ;;
      --name)
        if [ "$1" ]; then
          provided_name=$(echo "$1" | tr '/' '-' )
          if [[ "$provided_name" != "$1" ]]; then
            echo "Using name ${provided_name} rather than specified ${1}"
          fi
          shift
        else
          action_die "from parameter requires a value"
        fi
        ;;
      --script)
        if [ ! -z "$1" ]; then
          default_script="$1"
          shift
        else
          action_die "script parameter requires a value"
        fi
        ;;
      --*)
        action_die "Unknown argument: $arg"
        ;;
      *)

        # Assume everything else is supposed to be an app

        if [ -z "$arg" ]; then
            action_die "please specify a package"
        elif ! echo "$arg" | grep -q '.*/.*/.*'; then
            action_die "please specify the package using the format <type>/<name>/<version>"
        elif [ "$($_ALCES gridware list "${_GRIDWARE_REPO}/$arg" | wc -l)" != "1" ]; then
            action_die "package not found: $arg"
        fi

        if [[ "$1" == "--variant" ]]; then
          if [ "$2" ]; then
            package="$arg:$2"
            shift 2
          else
            action_die "variant parameter requires a value"
          fi
        else
          package="$arg"
          name="${name}-$(echo "$arg" | tr '/' '-' | tr '[A-Z]' '[a-z]')"
        fi
        display_name="${display_name}${arg}, "
        packages+=($package)
    esac

  done

  if [ ! -z "$provided_name" ]; then
    if [[ "$provided_name" != "gridware-"* ]]; then
      # Image names must be prefixed with "gridware-" to be used with Gridware.
      name="gridware-${provided_name}"
    else
      name="$provided_name"
    fi
  fi

  tag="$_REGISTRY/$_REGISTRY_USER/$name"

  action_emit "Building Gridware container '$name'..."
  echo ""

  build_dir="$(mktemp -d /tmp/gridware.docker.build.XXXXXXXX)"
  cat <<EOF > "${build_dir}"/Dockerfile
FROM ${base_image}
LABEL maintainer="Alces Software Ltd. <support@alces-software.com>" \
      description="Alces Gridware - ${display_name%%, }" \
      alces.gridware.packages="$(join_by , "${packages[@]}")" \
      build-date="$(date "+%Y%m%d")"
EOF

  for package in "${packages[@]}"; do
    # Include a gridware install command for each package
    variant=${package#*:}
    pkg_name=${package%:*}
    if [[ "$variant" != "$pkg_name" ]]; then
      variant="--variant ${variant}"
    else
      variant=""
    fi

    cat <<EOF >> "${build_dir}"/Dockerfile
RUN /opt/clusterware/bin/alces gridware install \
--binary --binary-only --binary-depends \
--non-interactive --yes $variant \
${_GRIDWARE_REPO}/$pkg_name && \
yum clean all && \
echo "$pkg_name" >> /opt/gridware/etc/defaults
EOF
  done

  if [ ! -z "$default_script" ]; then
    # User has specified a default script to run
    cp "${default_script}" "${build_dir}/default-cmd.sh"
    chmod a+x "${build_dir}/default-cmd.sh"
    echo "COPY default-cmd.sh /opt/gridware/bin/default-cmd.sh" >> "${build_dir}"/Dockerfile
  fi

  set -o pipefail
  if ! docker build -t "$tag:latest" "$build_dir" 2>&1 | sed 's/^/  >>> /g'; then
      rm -rf "$build_dir"
      echo ""
      action_die "unable to build Gridware container '$name'"
  else
      rm -rf "$build_dir"
  fi
}

cw_BINNAME="alces gridware"

setup
require action
require process
require files

r=$(type -p docker)
if [ $? != 0 -o ! -x "$r" ]; then
    action_die "unable to locate Docker installation"
elif ! process_reexec_sg docker --plain "$@"; then
   action_die "unable to find Docker group"
fi

files_load_config gridware

_REGISTRY=${cw_GRIDWARE_docker_registry:-docker.io}
_REGISTRY_USER=${cw_GRIDWARE_docker_registry_user:-alces}
_GRIDWARE_REPO=${cw_GRIDWARE_docker_gridware_repo:-main}
_ALCES="${cw_ROOT}"/bin/alces

main "$@"
