---
install:
  el7: |
    yum install -e0 -y openssl libxml2
  el6: |
    yum install -e0 -y openssl libxml2
  ubuntu1604: |
    apt-get install -y openssl libssl1.0.0 libxml2
  _: |
    # Download built Slurm and MUNGE.
    require serviceware
    serviceware_add torque

    # Install TORQUE MOTD.
    cp motd.sh "${cw_ROOT}"/etc/motd.d/00-tips-10-torque.sh

    # Install environment module (we also add it to the skeleton modules file
    # so it will be automatically loaded for Clusterware users created after
    # installing Slurm).
    mkdir -p "${cw_ROOT}"/etc/modules/services
    sed -e "s,_cw_ROOT_,${cw_ROOT},g" torque-module.template > "${cw_ROOT}"/etc/modules/services/torque
    sed -e 's,^module load \(.*\),module load services/torque \1,g' -i "${cw_ROOT}"/etc/skel/modules

    cp etc/logrotate.d/* "${cw_ROOT}"/etc/logrotate.d

    mkdir -p "${cw_ROOT}"/var/lib/docs/torque
    cp -R docs/templates "${cw_ROOT}"/var/lib/docs/torque
    cp -R docs/guides "${cw_ROOT}"/var/lib/docs/torque

    mkdir -p "${cw_ROOT}"/var/lib/scheduler
    cp torque.functions.sh "${cw_ROOT}"/var/lib/scheduler
component-mom:
  el7: |
    enable_mom() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-mom.service \
            > /etc/systemd/system/clusterware-torque-mom.service
    }
  ubuntu1604: |
    enable_mom() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-mom.service \
            > /etc/systemd/system/clusterware-torque-mom.service
    }
  _: |
    if [ ! -d /var/spool/torque ]; then
      mkdir /var/spool/torque
      tar -C /var/spool/torque -xzf torque-spool.tar.gz
    fi
    enable_mom
component-trqauthd:
  el7: |
    enable_trqauthd() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-trqauthd.service \
            > /etc/systemd/system/clusterware-torque-trqauthd.service
    }
  ubuntu1604: |
    enable_trqauthd() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-trqauthd.service \
            > /etc/systemd/system/clusterware-torque-trqauthd.service
    }
  _: |
    if [ ! -d /var/spool/torque ]; then
      mkdir /var/spool/torque
      tar -C /var/spool/torque -xzf torque-spool.tar.gz
    fi
    enable_trqauthd
component-server:
  el7: |
    enable_server() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-server.service \
            > /etc/systemd/system/clusterware-torque-server.service
    }

    start_trqauthd() {
        systemctl start clusterware-torque-trqauthd
    }

    stop_trqauthd() {
        systemctl stop clusterware-torque-trqauthd
    }
  ubuntu1604: |
    enable_server() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-server.service \
            > /etc/systemd/system/clusterware-torque-server.service
    }

    start_trqauthd() {
        systemctl start clusterware-torque-trqauthd
    }

    stop_trqauthd() {
        systemctl stop clusterware-torque-trqauthd
    }
  _: |
    "${cw_ROOT}"/bin/alces service enable torque/trqauthd
    enable_server
    name="$(hostname -f)"
    echo "${name}" > /var/spool/torque/server_name
    start_trqauthd
    LD_LIBRARY_PATH="${cw_ROOT}"/opt/torque/lib:$LD_LIBRARY_PATH
    PATH="${cw_ROOT}"/opt/torque/sbin:"${cw_ROOT}"/opt/torque/bin:$PATH
    pbs_server -t create -f
    sleep 2
    echo set server operators += root@${name} | qmgr
    echo set server managers += root@${name} | qmgr
    qmgr -c 'set server scheduling = true'
    qmgr -c 'set server keep_completed = 300'
    qmgr -c 'set server mom_job_sync = true'
    qmgr -c 'set server queue_centric_limits=True'

    ## create the routing queue
    qmgr -c 'create queue default'
    qmgr -c 'set queue default queue_type=Route'
    qmgr -c 'set queue default route_destinations=serial'
    qmgr -c 'set queue default route_destinations+=smp'
    qmgr -c 'set queue default route_destinations+=mpi'
    qmgr -c 'set queue default enabled=True'
    qmgr -c 'set queue default started=True'
    qmgr -c 'set server default_queue = default'

    ## create the serial queue
    qmgr -c 'create queue serial'
    qmgr -c 'set queue serial queue_type=Execution'
    qmgr -c 'set queue serial Priority=100'
    qmgr -c 'set queue serial resources_max.nodes=1'
    qmgr -c 'set queue serial resources_max.ncpus=1'
    qmgr -c 'set queue serial resources_max.procct=1'
    qmgr -c 'set queue serial resources_default.nodes=1'
    qmgr -c 'set queue serial resources_default.ncpus=1'
    qmgr -c 'set queue serial resources_default.procct=1'
    qmgr -c 'set queue serial resources_default.walltime = 1:00:00'
    qmgr -c 'set queue serial enabled=True'
    qmgr -c 'set queue serial started=True'

    ## create the smp queue
    qmgr -c 'create queue smp'
    qmgr -c 'set queue smp queue_type=Execution'
    qmgr -c 'set queue smp Priority=95'
    qmgr -c 'set queue smp resources_max.nodes=1'
    qmgr -c 'set queue smp resources_default.nodes=1'
    qmgr -c 'set queue smp resources_default.walltime = 1:00:00'
    qmgr -c 'set queue smp resources_min.ncpus=2'
    qmgr -c 'set queue smp resources_min.procct=2'
    qmgr -c 'set queue smp enabled=True'
    qmgr -c 'set queue smp started=True'

    ## create the mpi queue
    qmgr -c 'create queue mpi'
    qmgr -c 'set queue mpi queue_type=Execution'
    qmgr -c 'set queue mpi Priority=90'
    qmgr -c 'set queue mpi resources_default.nodes=2'
    qmgr -c 'set queue mpi resources_default.ncpus=2'
    qmgr -c 'set queue mpi resources_default.procct=2'
    qmgr -c 'set queue mpi resources_default.walltime = 1:00:00'
    qmgr -c 'set queue mpi resources_min.ncpus=2'
    qmgr -c 'set queue mpi resources_min.procct=2'
    qmgr -c 'set queue mpi enabled=True'
    qmgr -c 'set queue mpi started=True'

    qterm
    stop_trqauthd
component-sched:
  el7: |
    enable_sched() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-sched.service \
            > /etc/systemd/system/clusterware-torque-sched.service
    }
  ubuntu1604: |
    enable_sched() {
        sed -e "s,_cw_ROOT_,${cw_ROOT},g" \
            init/systemd/clusterware-torque-sched.service \
            > /etc/systemd/system/clusterware-torque-sched.service
    }
  _: |
    "${cw_ROOT}"/bin/alces service enable torque/server
    enable_sched
build:
  el7: |
    yum install -e0 -y gcc-c++ openssl-devel libxml2-devel boost-devel gperf pam-devel
  el6: |
    yum install -e0 -y gcc-c++ openssl-devel libxml2-devel boost-devel gperf pam-devel
  ubuntu1604: |
    apt-get install -y g++ libssl-dev libxml2-dev libboost-dev gperf libpam0g-dev
  _: |
    curl -L http://wpfilebase.s3.amazonaws.com/torque/torque-6.0.1-1456945733_daea91b.tar.gz -o /tmp/torque.tar.gz
    tar -C /tmp -xzf /tmp/torque.tar.gz
    patch=$(pwd)/pbs_sched-bind.patch
    pushd /tmp/torque-*
    patch -p0 < "${patch}"
    ./configure --prefix="${cw_ROOT}"/opt/torque \
      --with-pam \
      --enable-drmaa \
      --with-default-server=master
    make
    make install
    popd

    mkdir /var/spool/torque

    # Install TORQUE MOTD.
    cp motd.sh "${cw_ROOT}"/etc/motd.d/00-tips-10-torque.sh

    # Install environment module (we also add it to the skeleton modules file
    # so it will be automatically loaded for Clusterware users created after
    # installing Slurm).
    mkdir -p "${cw_ROOT}"/etc/modules/services
    sed -e "s,_cw_ROOT_,${cw_ROOT},g" torque-module.template > "${cw_ROOT}"/etc/modules/services/torque
    sed -e 's,^module load \(.*\),module load services/torque \1,g' -i "${cw_ROOT}"/etc/skel/modules

    cp etc/logrotate.d/* "${cw_ROOT}"/etc/logrotate.d

    #cp -R docs/templates/* "${cw_ROOT}"/var/lib/docs/templates
    #cp -R docs/guides/* "${cw_ROOT}"/var/lib/docs/guides

    mkdir -p "${cw_ROOT}"/var/lib/scheduler
    cp torque.functions.sh "${cw_ROOT}"/var/lib/scheduler
