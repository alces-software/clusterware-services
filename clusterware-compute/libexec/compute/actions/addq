#!/bin/bash
#==============================================================================
# Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_say_done() {
    if [ -z "$cw_UI_disable_spinner" ]; then
	toggle_spin
    fi
    if [ $1 -gt 0 ]; then
        echo '[31mFAIL[0m'
    else
        echo '[32mOK[0m '
    fi
}

_queue_accepted() {
    _say_done "$1"
    if [ "$1" == "0" ]; then
	doing 'Awaiting queue details'
    fi
}

_queue_created() {
    _say_done "$1"
}

main() {
  local queue min max desired
  queue="$1"

  if [ -z "$queue" ]; then
      action_die "no queue specified"
  fi
  desired="${2:-0}"
  min="${3:-0}"
  max="${4:-1}"

  doing 'Requesting queue creation'
  _COMPUTE_ACCEPTED_HOOK=_queue_accepted
  _COMPUTE_CREATED_HOOK=_queue_created
  if ! compute_call PUT "${queue}" "${desired}" "${min}" "${max}"; then
      action_die "queue creation failed: ${_COMPUTE_ERROR}"
  else
      action_die "queue creation underway: $queue" 0
  fi
}

setup

require action
require process
require ui

process_reexec_sudo "$@"

. "${cw_ROOT}/libexec/compute/share/functions.sh"

main "$@"
